% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/covFun.R
\name{stTrans}
\alias{stTrans}
\alias{vech2matlist}
\alias{start2theta}
\alias{theta2vech}
\alias{theta2nu_trans}
\alias{nu2theta_trans}
\alias{theta2nu_lambda}
\alias{nu2theta_lambda}
\alias{nu2theta_noTrans}
\title{(Co)variance parameter transformations.}
\usage{
stTrans(x)

vech2matlist(vech, skeleton)

start2theta(Gstart, Rstart, names = NULL)

theta2vech(theta)

theta2nu_trans(theta)

nu2theta_trans(nu)

theta2nu_lambda(theta, thetaG, thetaR)

nu2theta_lambda(nu, sigma2e, thetaG, thetaR)

nu2theta_noTrans(nu, thetaG, thetaR)
}
\arguments{
\item{x, theta, nu}{A \code{list} of matrices containing the (co)variance
parameters of the model.}

\item{vech}{A \code{vector} of (co)variance parameters.}

\item{skeleton}{An example structure to map \code{vech} onto.}

\item{Gstart, Rstart}{A \code{list} of starting (co)variance values for the
G-structure (random effects terms) or R-structure (residual).}

\item{thetaG, thetaR}{A \code{vector} indexing the G-structure or R-structure
components, respectively.}

\item{sigma2e}{A \code{numeric} estimate of the factored out residual
variance from the mixed model equations (i.e., the \sQuote{lambda} scale)
\eqn{\sigma^{2}_{e}}.}
}
\value{
Functions are specified to mostly return either a \code{list} of
  matrices (structure as defined by the \dQuote{skel} attribute or in
  the \code{skeleton} object) or a \code{vector} containing the (co)variance
  parameters of the model. Additional list elements returned can be:
  \describe{
    \item{thetaG }{A \code{vector} indexing the G-structure components.}
    \item{thetaR }{A \code{vector} indexing the R-structure components.}
  }
}
\description{
Converts lists of (co)variance parameters either between \code{list} and 
  \code{vector} format or between the theta and nu scales.
}
\details{
\describe{
  \item{stTrans }{Transform start parameters into format \code{gremlin}
    expects.} 
  \item{vech2matlist }{Converts a vector of (co)variance parameters to a list of
    covariance matrices.}
  \item{start2theta }{Converts lists of starting values for (co)variance
    parameters to a theta object used to structure the (co)variance components
    within gremlin.}
  \item{theta2vech }{Converts a theta (list) of (co)variance parameter
    matrices to a vector.}
  \item{theta2nu_trans }{Transforms theta to nu scale by taking the Cholesky
    factor of each covariance matrix and then replacing the diagonals with 
    their (natural) logarithms. Done to ensure matrices are positive definite.}
  \item{nu2theta_trans }{Back transformation from \code{theta2nu_trans}:
    exponentiates the diagonal elements of each matrix then calculates the
    cross-product.}
  \item{theta2nu_lambda }{Transformation that factors out a residual variance
    so that \code{nu} contains the \sQuote{lambda} parameterization: ratios
    of variance parameters with the residual variance.}
  \item{nu2theta_lambda }{Back transformation from \code{theta2nu_lambda}.}
  \item{nu2theta_noTrans }{Structures \code{theta} when not transformed.}
}
}
\examples{
  # User-specified starting parameters
  thetaOut <- start2theta(Gstart = list(matrix(1), matrix(2)),
    Rstart = matrix(3))
  ## convert to a vector and then back into a matrix list
  thetav <- theta2vech(thetaOut$theta)
  theta <- vech2matlist(thetav, attr(thetav, "skel"))
    identical(thetaOut$theta, theta)  #<-- should be TRUE
  # lambda parameterization transformation
  nu <- theta2nu_lambda(theta, thetaOut$thetaG, thetaOut$thetaR)
  # back-transform from (lambda scale) nu to theta
  ## For example, when the sigma2e estimate=0.5
  theta2 <- nu2theta_lambda(nu, sigma2e = 0.5, thetaOut$thetaG, thetaOut$thetaR)
}
\author{
\email{matthewwolak@gmail.com}
}
